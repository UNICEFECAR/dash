import pandas as pd

import plotly.express as px

from . import data, years
from .base_page import get_base_layout

indicators_dict = {
    "DEMOGRAPHY": {
        "NAME": "Demography about Children",
        "CARDS": [
            {
                "name": "(0-17) living with two parents",
                "indicator": "DM_CHLD_TWO_PRNT",
                "suffix": "Percent of Children",
            },
        ],
        "MAIN": {
            "name": "Violence and Harmful Practices",
            "geo": "Geographic area",
            "options": dict(
                lat="latitude",
                lon="longitude",
                size="OBS_VALUE",
                text="Geographic area",
                color="OBS_VALUE",
                color_continuous_scale=px.colors.sequential.GnBu,
                size_max=40,
                zoom=2.5,
                animation_frame="TIME_PERIOD",
                height=750,
            ),
            "indicators": [
                "DM_CHLD_TWO_PRNT",
                "DM_FRATE_TOT",
            ],
            "default": "DM_FRATE_TOT",
        },
        "AREA_1": {
            "type": "bar",
            "options": dict(
                x="Geographic area",
                y="OBS_VALUE",
                barmode="group",
                text="TIME_PERIOD",
            ),
            "compare": "Sex",
            "indicators": [
                "DM_CHLD_TWO_PRNT",
                "DM_FRATE_TOT",
            ],
            "default": "DM_FRATE_TOT",
        },
        "AREA_2": {
            "graphs": {
                "bar": {
                    "options": dict(
                        x="Geographic area",
                        y="OBS_VALUE",
                        barmode="group",
                        text="TIME_PERIOD",
                    ),
                    "compare": "Sex",
                },
                "line": {
                    "options": dict(
                        x="TIME_PERIOD",
                        y="OBS_VALUE",
                        color="Geographic area",
                        hover_name="Geographic area",
                        line_shape="spline",
                        render_mode="svg",
                    ),
                    "trace_options": dict(mode="lines+markers"),
                },
            },
            "indicators": [
                "DM_CHLD_TWO_PRNT",
                "DM_FRATE_TOT",
            ],
            "default_graph": "bar",
            "default": "DM_FRATE_TOT",
        },
    },
    "ECONOMY": {
        "NAME": "Political Economy",
        "CARDS": [
            {
                "name": "general government expenditure (% of GDP)",
                "indicator": "EC_TEC_GRL_GOV_EXP",
                "suffix": "Total",
            },
            {
                "name": "government revenue (budgetary central government) as a proportion of GDP",
                "indicator": "PT_CHLD_INRESIDENTIAL_RATE_B",
                "suffix": "Total Percentage",
            },
            {
                "name": "national estimate (% of total labor force, by sex)",
                "indicator": "EC_SI_POV_GINI",
                "suffix": "Unemployment",
            },
            {
                "name": "population by country or territory of origin",
                "indicator": "DM_SM_POP_REFG_OR",
                "suffix": "Refugee",
            },
        ],
        "MAIN": {
            "name": "Children without parental care",
            "geo": "Geographic area",
            "options": dict(
                lat="latitude",
                lon="longitude",
                size="OBS_VALUE",
                text="Geographic area",
                color="OBS_VALUE",
                color_continuous_scale=px.colors.sequential.GnBu,
                size_max=40,
                zoom=2.5,
                animation_frame="TIME_PERIOD",
                height=750,
            ),
            "indicators": [
                "EC_HDI",
                "EC_NY_GDP_MKTP_KD_ZG",
                "EC_NY_GDP_PCAP_KD_ZG",
                "EC_NE_DAB_TOTL_ZS",
                "EC_TEC_GRL_GOV_EXP",
                "EC_TEC_CNT_GOV_EXP",
                "EC_TEC_STA_GOV_EXP",
                "EC_TEC_LOC_GOV_EXP",
                "EC_TEC_SSF_EXP",
                "EC_GR_G14_GDP",
                "EC_SP_GOV_EXP_GDP",
                "EC_SP_GOV_EXP_TOT",
                "EC_NY_GDP_PCAP_PP_CD",
                "EC_NY_GNP_ATLS_CD",
                "EC_NY_GNP_PCAP_CD",
                "EC_GC_DOD_TOTL_GD_ZS",
                "EC_SI_POV_GINI",
                "EC_SL_UEM_TOTL_NE_ZS",
            ],
            "default": "EC_HDI",
        },
        "AREA_1": {
            "type": "bar",
            "options": dict(
                x="Geographic area",
                y="OBS_VALUE",
                barmode="group",
                text="TIME_PERIOD",
            ),
            # compare is the default selection
            "compare": "Sex",
            "default": "EC_NY_GDP_MKTP_KD_ZG",
            "indicators": [
                "EC_HDI",
                "EC_NY_GDP_MKTP_KD_ZG",
                "EC_NY_GDP_PCAP_KD_ZG",
                "EC_NE_DAB_TOTL_ZS",
                "EC_TEC_GRL_GOV_EXP",
                "EC_TEC_CNT_GOV_EXP",
                "EC_TEC_STA_GOV_EXP",
                "EC_TEC_LOC_GOV_EXP",
                "EC_TEC_SSF_EXP",
                "EC_GR_G14_GDP",
                "EC_SP_GOV_EXP_GDP",
                "EC_SP_GOV_EXP_TOT",
                "EC_NY_GDP_PCAP_PP_CD",
                "EC_NY_GNP_ATLS_CD",
                "EC_NY_GNP_PCAP_CD",
                "EC_GC_DOD_TOTL_GD_ZS",
                "EC_SI_POV_GINI",
                "EC_SL_UEM_TOTL_NE_ZS",
            ],
        },
        "AREA_2": {
            "graphs": {
                "bar": {
                    "options": dict(
                        x="Geographic area",
                        y="OBS_VALUE",
                        barmode="group",
                        text="TIME_PERIOD",
                    ),
                    "compare": "Sex",
                },
                "line": {
                    "options": dict(
                        x="TIME_PERIOD",
                        y="OBS_VALUE",
                        color="Geographic area",
                        hover_name="Geographic area",
                        line_shape="spline",
                        render_mode="svg",
                    ),
                    "trace_options": dict(mode="lines+markers"),
                },
            },
            "indicators": [
                "EC_HDI",
                "EC_NY_GDP_MKTP_KD_ZG",
                "EC_NY_GDP_PCAP_KD_ZG",
                "EC_NE_DAB_TOTL_ZS",
                "EC_TEC_GRL_GOV_EXP",
                "EC_TEC_CNT_GOV_EXP",
                "EC_TEC_STA_GOV_EXP",
                "EC_TEC_LOC_GOV_EXP",
                "EC_TEC_SSF_EXP",
                "EC_GR_G14_GDP",
                "EC_SP_GOV_EXP_GDP",
                "EC_SP_GOV_EXP_TOT",
                "EC_NY_GDP_PCAP_PP_CD",
                "EC_NY_GNP_ATLS_CD",
                "EC_NY_GNP_PCAP_CD",
                "EC_GC_DOD_TOTL_GD_ZS",
                "EC_SI_POV_GINI",
                "EC_SL_UEM_TOTL_NE_ZS",
            ],
            "default_graph": "line",
            "default": "EC_NY_GDP_PCAP_KD_ZG",
        },
    },
    "MIGRATION": {
        "NAME": "Migration and Displacement",
        "CARDS": [
            {
                "name": "by country or territory of origin",
                "indicator": "DM_SM_POP_REFG_OR",
                "suffix": "Refugee Population",
            },
            {
                "name": "International migrant stock by country of destination (by age)",
                "indicator": "MG_INTNL_MG_CNTRY_DEST_PS",
                "suffix": "Thousands of Persons",
            },
        ],
        "MAIN": {
            "name": "Child Victims of Migration and Displacement",
            "geo": "Geographic area",
            "options": dict(
                lat="latitude",
                lon="longitude",
                size="OBS_VALUE",
                text="Geographic area",
                color="OBS_VALUE",
                color_continuous_scale=px.colors.sequential.GnBu,
                size_max=40,
                zoom=2.5,
                animation_frame="TIME_PERIOD",
                height=750,
            ),
            "indicators": [
                "EC_SL_UEM_TOTL_ZS",
                "DM_SM_POP_REFG",
                "DM_SM_POP_REFG_OR",
                "DM_ASYL_FRST",
                "DM_ASYL_UASC",
                "MG_INTNL_MG_CNTRY_DEST_PS",
            ],
            "default": "EC_SL_UEM_TOTL_ZS",
        },
        "AREA_1": {
            "type": "bar",
            "options": dict(
                x="Geographic area",
                y="OBS_VALUE",
                barmode="group",
                text="TIME_PERIOD",
            ),
            "compare": "Sex",
            "indicators": [
                "EC_SL_UEM_TOTL_ZS",
                "DM_SM_POP_REFG",
                "DM_SM_POP_REFG_OR",
                "DM_ASYL_FRST",
                "DM_ASYL_UASC",
                "MG_INTNL_MG_CNTRY_DEST_PS",
            ],
            "default": "EC_SL_UEM_TOTL_ZS",
        },
        "AREA_2": {
            "graphs": {
                "bar": {
                    "options": dict(
                        x="Geographic area",
                        y="OBS_VALUE",
                        barmode="group",
                        text="TIME_PERIOD",
                    ),
                    "compare": "Sex",
                },
                "line": {
                    "options": dict(
                        x="TIME_PERIOD",
                        y="OBS_VALUE",
                        color="Geographic area",
                        hover_name="Geographic area",
                        line_shape="spline",
                        render_mode="svg",
                    ),
                    "trace_options": dict(mode="lines+markers"),
                },
            },
            "indicators": [
                "EC_SL_UEM_TOTL_ZS",
                "DM_SM_POP_REFG",
                "DM_SM_POP_REFG_OR",
                "DM_ASYL_FRST",
                "DM_ASYL_UASC",
                "MG_INTNL_MG_CNTRY_DEST_PS",
            ],
            "default_graph": "line",
            "default": "DM_SM_POP_REFG",
        },
    },
    "RISKS": {
        "NAME": "Risks, humanitarian situation and impact of climate change",
        "CARDS": [
            {
                "name": "deaths and missing persons attributed to disasters (per 100,000 population)",
                "indicator": "CR_VC_DSR_MTMP",
                "suffix": "Number of",
            },
            {
                "name": "directly affected persons attributed to disasters (per 100,000 population)",
                "indicator": "CR_VC_DSR_DAFF",
                "suffix": "Number of",
            },
            {
                "name": "population with access to electricity (% by residence)",
                "indicator": "CR_EG_ACS_ELEC",
                "suffix": "Proportion of",
            },
            {
                "name": "adoption and implementation of national DRR strategies in line with the Sendai Framework",
                "indicator": "CR_SG_DSR_LGRGSR",
                "suffix": "Score of",
            },
        ],
        "MAIN": {
            "name": "Child Victims of Crime",
            "geo": "Geographic area",
            "options": dict(
                lat="latitude",
                lon="longitude",
                size="OBS_VALUE",
                text="Geographic area",
                color="OBS_VALUE",
                color_continuous_scale=px.colors.sequential.GnBu,
                size_max=40,
                zoom=2.5,
                animation_frame="TIME_PERIOD",
                height=750,
            ),
            "indicators": [
                "CR_VC_DSR_MTMP",
                "CR_VC_DSR_DAFF",
                "CR_SH_STA_AIRP",
                "CR_SH_STA_ASAIRP",
                "CR_EG_EGY_CLEAN",
                "CR_EG_ACS_ELEC",
                "CR_SG_DSR_LGRGSR",
            ],
            "default": "CR_VC_DSR_MTMP",
        },
        "AREA_1": {
            "type": "bar",
            "options": dict(
                x="Geographic area",
                y="OBS_VALUE",
                barmode="group",
                text="TIME_PERIOD",
            ),
            "compare": "Sex",
            "indicators": [
                "CR_VC_DSR_MTMP",
                "CR_VC_DSR_DAFF",
                "CR_SH_STA_AIRP",
                "CR_SH_STA_ASAIRP",
                "CR_EG_EGY_CLEAN",
                "CR_EG_ACS_ELEC",
                "CR_SG_DSR_LGRGSR",
            ],
            "default": "CR_VC_DSR_MTMP",
        },
        "AREA_2": {
            "graphs": {
                "bar": {
                    "options": dict(
                        x="Geographic area",
                        y="OBS_VALUE",
                        barmode="group",
                        text="TIME_PERIOD",
                    ),
                    "compare": "Sex",
                },
                "line": {
                    "options": dict(
                        x="TIME_PERIOD",
                        y="OBS_VALUE",
                        color="Geographic area",
                        hover_name="Geographic area",
                        line_shape="spline",
                        render_mode="svg",
                    ),
                    "trace_options": dict(mode="lines+markers"),
                },
            },
            "indicators": [
                "CR_VC_DSR_MTMP",
                "CR_VC_DSR_DAFF",
                "CR_SH_STA_AIRP",
                "CR_SH_STA_ASAIRP",
                "CR_EG_EGY_CLEAN",
                "CR_EG_ACS_ELEC",
                "CR_SG_DSR_LGRGSR",
            ],
            "default": "CR_VC_DSR_MTMP",
            "default_graph": "line",
        },
    },
    "SPENDING": {
        "NAME": "Public spending on children",
        "CARDS": [
            {
                "name": "public social expenditure (% of total general government expenditure)",
                "indicator": "EC_TOT_PUB_EXP_TOT",
                "suffix": "Total",
            },
            {
                "name": "social expenditure (% of total general government expenditure)",
                "indicator": "EC_FAM_PUB_EXP_TOT",
                "suffix": "Family public",
            },
        ],
        "MAIN": {
            "name": "Child Victims of Crime",
            "geo": "Geographic area",
            "options": dict(
                lat="latitude",
                lon="longitude",
                size="OBS_VALUE",
                text="Geographic area",
                color="OBS_VALUE",
                color_continuous_scale=px.colors.sequential.GnBu,
                size_max=40,
                zoom=2.5,
                animation_frame="TIME_PERIOD",
                height=750,
            ),
            "indicators": [
                "EC_TOT_PUB_EXP_GDP",
                "EC_TOT_PUB_EXP_TOT",
                "EC_FAM_PUB_EXP_GDP",
                "EC_FAM_PUB_EXP_TOT",
            ],
            "default": "EC_TOT_PUB_EXP_TOT",
        },
        "AREA_1": {
            "type": "bar",
            "options": dict(
                x="Geographic area",
                y="OBS_VALUE",
                barmode="group",
                text="TIME_PERIOD",
            ),
            "compare": "Sex",
            "indicators": [
                "EC_TOT_PUB_EXP_GDP",
                "EC_TOT_PUB_EXP_TOT",
                "EC_FAM_PUB_EXP_GDP",
                "EC_FAM_PUB_EXP_TOT",
            ],
            "default": "EC_TOT_PUB_EXP_TOT",
        },
        "AREA_2": {
            "graphs": {
                "bar": {
                    "options": dict(
                        x="Geographic area",
                        y="OBS_VALUE",
                        barmode="group",
                        text="TIME_PERIOD",
                    ),
                    "compare": "Sex",
                },
                "line": {
                    "options": dict(
                        x="TIME_PERIOD",
                        y="OBS_VALUE",
                        color="Geographic area",
                        hover_name="Geographic area",
                        line_shape="spline",
                        render_mode="svg",
                    ),
                    "trace_options": dict(mode="lines+markers"),
                },
            },
            "indicators": [
                "EC_TOT_PUB_EXP_GDP",
                "EC_TOT_PUB_EXP_TOT",
                "EC_FAM_PUB_EXP_GDP",
                "EC_FAM_PUB_EXP_TOT",
            ],
            "default": "EC_TOT_PUB_EXP_TOT",
            "default_graph": "line",
        },
    },
    "DATA": {
        "NAME": "Data on Children",
        "CARDS": [
            {
                "name": "with national statistical plans with funding from Government",
                "indicator": "CR_SG_STT_NSDSFDGVT",
                "suffix": "Countries",
            },
            {
                "name": "that have conducted at least one population and housing census in the last 10 years",
                "indicator": "CR_SG_REG_CENSUSN",
                "suffix": "Countries",
            },
        ],
        "MAIN": {
            "name": "Child Victims of Crime",
            "geo": "Geographic area",
            "options": dict(
                lat="latitude",
                lon="longitude",
                size="OBS_VALUE",
                text="Geographic area",
                color="OBS_VALUE",
                color_continuous_scale=px.colors.sequential.GnBu,
                size_max=40,
                zoom=2.5,
                animation_frame="TIME_PERIOD",
                height=750,
            ),
            "indicators": [
                "CR_IQ_SCI_OVRL",
                "CR_SG_STT_FPOS",
                "CR_SG_STT_NSDSFND",
                "CR_SG_STT_NSDSIMPL",
                "CR_SG_STT_NSDSFDGVT",
                "CR_SG_STT_NSDSFDDNR",
                "CR_SG_STT_NSDSFDOTHR",
                "CR_SG_STT_CAPTY",
                "CR_SG_REG_CENSUSN",
            ],
            "default": "CR_IQ_SCI_OVRL",
        },
        "AREA_1": {
            "type": "bar",
            "options": dict(
                x="Geographic area",
                y="OBS_VALUE",
                barmode="group",
                text="TIME_PERIOD",
            ),
            "compare": "Sex",
            "indicators": [
                "CR_IQ_SCI_OVRL",
                "CR_SG_STT_FPOS",
                "CR_SG_STT_NSDSFND",
                "CR_SG_STT_NSDSIMPL",
                "CR_SG_STT_NSDSFDGVT",
                "CR_SG_STT_NSDSFDDNR",
                "CR_SG_STT_NSDSFDOTHR",
                "CR_SG_STT_CAPTY",
                "CR_SG_REG_CENSUSN",
            ],
            "default": "CR_IQ_SCI_OVRL",
        },
        "AREA_2": {
            "graphs": {
                "bar": {
                    "options": dict(
                        x="Geographic area",
                        y="OBS_VALUE",
                        barmode="group",
                        text="TIME_PERIOD",
                    ),
                    "compare": "Sex",
                },
                "line": {
                    "options": dict(
                        x="TIME_PERIOD",
                        y="OBS_VALUE",
                        color="Geographic area",
                        hover_name="Geographic area",
                        line_shape="spline",
                        render_mode="svg",
                    ),
                    "trace_options": dict(mode="lines+markers"),
                },
            },
            "indicators": [
                "CR_IQ_SCI_OVRL",
                "CR_SG_STT_FPOS",
                "CR_SG_STT_NSDSFND",
                "CR_SG_STT_NSDSIMPL",
                "CR_SG_STT_NSDSFDGVT",
                "CR_SG_STT_NSDSFDDNR",
                "CR_SG_STT_NSDSFDOTHR",
                "CR_SG_STT_CAPTY",
                "CR_SG_REG_CENSUSN",
            ],
            "default": "CR_IQ_SCI_OVRL",
            "default_graph": "line",
        },
    },
}


def get_layout(**kwargs):
    kwargs["indicators"] = indicators_dict
    return get_base_layout(**kwargs)
