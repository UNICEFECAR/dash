# Python on Linux Web App
# Build a Python project (using Django/Flask/Bottle frameworks) and deploy it to Azure as a Linux web app.
name: Deploy Python package to Azure Web App as a Linux web app.
on:
  push:
    branches:
      - master
      - dev

# CONFIGURATION
# For help, go to https://github.com/Azure/Actions
# See this in-depth article on CI for Python applications: https://azure.github.io/AppService/2020/12/11/cicd-for-python-apps.html
env:
  AZURE_WEBAPP_NAME: "tm-dash" # set this to your application's name
  WORKING_DIRECTORY: "." # set this to the path to your path of working directory inside github repository, defaults to the repository root
  PYTHON_VERSION: "3.8"
  STARTUP_COMMAND: "run-transmonee_dashboard-dev" # set this to the startup command required to start the gunicorn server. default it is empty

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: dev
    steps:
      # checkout the repo
      - uses: actions/checkout@master
      # setup python
      - name: Setup Python
        uses: actions/setup-python@v1
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      # install dependencies
      - name: python install
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          sudo apt install python${{ env.PYTHON_VERSION }}-venv
          python -m venv --copies antenv
          source antenv/bin/activate
          pip install setuptools
          pip install -r requirements.txt

      # Azure login
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_SERVICE_PRINCIPAL }}

      - name: Configure deployment and runtime settings on the webapp
        uses: Azure/appservice-settings@v1
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          app-settings-json: '[{ "name": "SCM_DO_BUILD_DURING_DEPLOYMENT", "value": "true" }, { "name": "FLASK_ENV", "value": "production"}]'

      # deploy web app
      - uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          slot-names: dev
          package: ${{ env.WORKING_DIRECTORY }}
          startup-command: ${{ env.STARTUP_COMMAND }}

      # Azure logout
      - name: logout
        run: |
          az logout
